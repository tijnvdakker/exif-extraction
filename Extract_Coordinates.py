from exif import Image
import os
import gmplot

#The path to the directory which contains the images
path_to_directory = r'/home/tijn/images'

#The path to the directory where to save our map file generated by Gmplot
path_to_save = r"/home/tijn/map.html"

def get_exif_coordinates(encoded_path_to_directory, file):
    path_to_file = os.path.join(encoded_path_to_directory, file)

    #Extract the exif data with the exif package
    with open(path_to_file, 'rb') as source:
        image = Image(source)

    #Check for the exif data
    if image.has_exif:
        try:
            #The coordinates which are extracted are in Degrees Minutes Seconds format, so convert them to Decimal Degrees for our map
            coordinates = [dms_to_dd(image.gps_latitude, image.gps_latitude_ref), dms_to_dd(image.gps_longitude, image.gps_longitude_ref)]
            print("The image " + file.decode("utf-8") + " has coordinates: " + str(coordinates[0]) + " , " + str(coordinates[1]))
            return coordinates
        except AttributeError:
            print("The image " + file.decode("utf-8") + " has no coordinates")
            return 0
    else:
        print("The image " + file.decode("utf-8") + " has no exif data")

#Function to convert the Degrees Minutes Seconds format to Decimal Degrees
def dms_to_dd(coordinates, direction):
    dd = coordinates[0] + coordinates[1] / 60 + coordinates[2] / 3600
    #If the direction is South or West, it is negative
    if direction == 'S' or direction == 'W':
        dd = -dd
    return dd

encoded_path_to_directory = os.fsencode(path_to_directory)

lat_coords = []
lon_coords= []

print("The following data was captured whilst processing the images: \n")

#Run through our images in our specified directory
for file in os.listdir(encoded_path_to_directory):
     coordinates = get_exif_coordinates(encoded_path_to_directory, file)
     #If we have coordinates, add them to our list
     if coordinates:
         lat_coords.append(coordinates[0])
         lon_coords.append(coordinates[1])

#Create a scatter plot with Gmplot using the Google Maps API (lat center, lon center, zoom)
map = gmplot.GoogleMapPlotter(52, -0.4, 7, apikey="") #Put API key here (optional)

#Plot our points on the map
map.scatter(lat_coords, lon_coords, '#FF0000', size = 40, marker = False)

#Connect the points (optional)
map.plot(lat_coords, lon_coords, 'blue', edge_width=2.5)
  
map.draw(path_to_save)
